/**
 * Capability can only be delegated (but not invoked) allowing audience to
 * be derived any `account/usage/` prefixed capability for the account identified
 * by DID in the `with` field.
 */
export const accountUsage: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"account/usage/*", `did:mailto:${string}` & `did:${string}` & import("multiformats").Phantom<{
    protocol: "did:";
}>, any>>;
/**
 * Capability can be invoked by an agent to retrieve usage data for all or a
 * specified set of spaces within an account in a given period.
 */
export const get: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"account/usage/get", `did:mailto:${string}` & `did:${string}` & import("multiformats").Phantom<{
    protocol: "did:";
}>, Schema.InferStruct<{
    spaces: Schema.Schema<(`did:key:${string}` & `did:${string}` & import("multiformats").Phantom<{
        protocol: "did:";
    }>)[] | undefined, any>;
    period: Schema.Schema<Schema.InferStruct<{
        from: Schema.NumberSchema<number & import("multiformats").Phantom<{
            typeof: "integer";
        }>, unknown>;
        to: Schema.NumberSchema<number & import("multiformats").Phantom<{
            typeof: "integer";
        }>, unknown>;
    }> | undefined, unknown>;
}>>>;
import { Schema } from '@ucanto/validator';
//# sourceMappingURL=usage.d.ts.map